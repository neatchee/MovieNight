// Minimal HLS.js stub for development - replace with actual hls.js library
// This is a placeholder implementation for testing
window.Hls = {
    isSupported: function() {
        // Check if HLS is natively supported or if we can use MSE
        var video = document.createElement('video');
        return !!(video.canPlayType && video.canPlayType('application/vnd.apple.mpegurl') || 
                 (window.MediaSource || window.WebKitMediaSource));
    },
    Events: {
        MANIFEST_LOADED: 'hlsManifestLoaded',
        LEVEL_LOADED: 'hlsLevelLoaded',
        FRAG_LOADED: 'hlsFragLoaded',
        ERROR: 'hlsError'
    },
    ErrorTypes: {
        NETWORK_ERROR: 'networkError',
        MEDIA_ERROR: 'mediaError',
        OTHER_ERROR: 'otherError'
    }
};

window.Hls.prototype = {
    constructor: function(config) {
        this.config = config || {};
        this.media = null;
        this._listeners = {};
    },
    
    loadSource: function(url) {
        this.url = url;
        if (this.media) {
            // For native HLS support
            if (this.media.canPlayType('application/vnd.apple.mpegurl')) {
                this.media.src = url;
            }
        }
    },
    
    attachMedia: function(video) {
        this.media = video;
        if (this.url && video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = this.url;
        }
    },
    
    on: function(event, listener) {
        if (!this._listeners[event]) {
            this._listeners[event] = [];
        }
        this._listeners[event].push(listener);
    },
    
    destroy: function() {
        this.media = null;
        this._listeners = {};
    }
};

// Constructor function
window.Hls = function(config) {
    var instance = Object.create(window.Hls.prototype);
    instance.constructor.call(instance, config);
    return instance;
};

// Static methods
window.Hls.isSupported = function() {
    var video = document.createElement('video');
    return !!(video.canPlayType && video.canPlayType('application/vnd.apple.mpegurl') || 
             (window.MediaSource || window.WebKitMediaSource));
};

window.Hls.Events = {
    MANIFEST_LOADED: 'hlsManifestLoaded',
    LEVEL_LOADED: 'hlsLevelLoaded', 
    FRAG_LOADED: 'hlsFragLoaded',
    ERROR: 'hlsError'
};

window.Hls.ErrorTypes = {
    NETWORK_ERROR: 'networkError',
    MEDIA_ERROR: 'mediaError',
    OTHER_ERROR: 'otherError'
};