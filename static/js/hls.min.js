// HLS.js minimal implementation placeholder
// This would normally be the full hls.js library from https://github.com/video-dev/hls.js
// For now, we'll implement basic HLS detection and fallback
(function(global) {
    var Hls = function() {
        this.events = {};
    };
    
    Hls.isSupported = function() {
        // Check for native HLS support or MediaSource Extensions
        var video = document.createElement('video');
        return !!(video.canPlayType && 
                 video.canPlayType('application/vnd.apple.mpegurl') ||
                 (window.MediaSource && MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"')));
    };
    
    Hls.prototype.loadSource = function(url) {
        this.url = url;
    };
    
    Hls.prototype.attachMedia = function(video) {
        this.media = video;
        if (this.url) {
            video.src = this.url;
        }
    };
    
    Hls.prototype.on = function(event, callback) {
        if (!this.events[event]) {
            this.events[event] = [];
        }
        this.events[event].push(callback);
    };
    
    Hls.prototype.destroy = function() {
        if (this.media) {
            this.media.src = '';
            this.media = null;
        }
        this.events = {};
    };
    
    // Events (simplified)
    Hls.Events = {
        MANIFEST_LOADED: 'hlsManifestLoaded',
        ERROR: 'hlsError'
    };
    
    Hls.ErrorTypes = {
        NETWORK_ERROR: 'networkError',
        MEDIA_ERROR: 'mediaError'
    };
    
    global.Hls = Hls;
})(window);